function C = angleIntervalUnion(A, B)
    % The input set A,B is either a subset of [0, 2*pi] or [-pi, pi]
    % the output set C is a subset of [-pi, pi]
    if A.isempty()
        C   = B;
        return
    elseif B.isempty()
        C   = A;
        return
    end
    % First convert intervals A,B to ranges of [-pi, pi]
    A1  = intervalWrapToPi(A);
    B1  = intervalWrapToPi(B);
    infimum1    = min([getInf(A1), getInf(B1)]);
    supremum1   = max([getSup(A1), getSup(B1)]);
    candidate1  = interval(infimum1, supremum1);
    % Second convert intervals A,B to ranges of [-pi, pi]
    A2  = intervalWrapTo2Pi(A);
    B2  = intervalWrapTo2Pi(B);
    infimum2    = min([getInf(A2), getInf(B2)]);
    supremum2   = max([getSup(A2), getSup(B2)]);
    candidate2  = interval(infimum2, supremum2);
    
end

function output = intervalWrapToPi(input)
    if input.inf < pi && input.sup > pi
        output{1}   = interval(-pi, wrapToPi(input.sup));
        output{2}   = interval(wrapToPi(input.inf), pi);
    else
        output  = interval(wrapToPi(input.inf), wrapToPi(input.sup));
    end
end

function output = intervalWrapTo2Pi(input)
    if input.inf < 0 && input.sup > 0
        output{1}   = interval(0, wrapTo2Pi(input.sup));
        output{2}   = interval(wrapTo2Pi(input.inf), 0);
    else
        output  = interval(wrapTo2Pi(input.inf), wrapTo2Pi(input.sup));
    end
end

function sup = getSup(A)
    if length(A) > 1
        sup     = max([A{1}.sup, A{2}.sup]);
    else
        sup     = A.sup;
    end
end

function sup = getInf(A)
    if length(A) > 1
        sup     = min([A{1}.inf, A{2}.inf]);
    else
        sup     = A.inf;
    end
end